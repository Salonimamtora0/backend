pipeline {
    agent any
    environment {
        AWS_ACCOUNT_ID="438282242070"
        AWS_DEFAULT_REGION="us-east-1" 
        IMAGE_REPO_NAME="my-repo"
        IMAGE_TAG="latest"
        CLUSTER_NAME="my-cl"
        SERVICE="Service"
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"
    }
    
    stages {
        stage('clone') {
            steps {
                script {

                    sh 'rm -rf backend'
                    sh 'git clone https://github.com/Salonimamtora0/backend.git'
                }
            }
        }
   

        stage('build') {
            steps {
                script {
                    sh '''
                    cd backend
                    npm install
                '''
                }
            }
        }
        
        stage('build1') {
            steps {
                script {
                    sh '''
                    cd backend
                    npm run build
                '''
                }
            }
        }
 
 
         stage('Logging into AWS ECR') {
            steps {
                script {
                sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
                }
                 
            }
        }
        
   
    // Building Docker images
    stage('Building image') {
      steps{
        script {
          dockerImage = docker.build "${IMAGE_REPO_NAME}:${IMAGE_TAG}"
        }
      }
    }
   
    // Uploading Docker images into AWS ECR
    stage('Pushing to ECR') {
     steps{  
         script {
                sh "docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG} ${REPOSITORY_URI}:$IMAGE_TAG"
                sh "docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}"
         }
        }
      }
      
      
   // Create Task-defination
    stage('Create task defination') {
     steps{
         script {
                sh '''
      
                cd backend
                 
                
        	    aws ecs register-task-definition --family testing-cluster --cli-input-json file://backend/testingtaskdef.json --region $AWS_REGION
        
        
        	    aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE --task-definition testing-cluster --desired-count 1 --region $AWS_REGION 
        
        
        
        	    DECRIBED_SERVICE=$(aws ecs describe-services --region $AWS_REGION --cluster $CLUSTER_NAME --services $SERVICE);
        	    CURRENT_DESIRED_COUNT=$(echo $DECRIBED_SERVICE | jq --raw-output ".services[0].desiredCount")
        	 
        
        	    CURRENT_TASK_REVISION=$(echo $DECRIBED_SERVICE | jq -r ".services[0].taskDefinition")
        	    echo "Current Task definition in Service" + $CURRENT_TASK_REVISION
        
        	    CURRENT_RUNNING_TASK=$(echo $DECRIBED_SERVICE | jq -r ".services[0].runningCount")
        	    echo $CURRENT_RUNNING_TASK
        
        	    CURRENT_STALE_TASK=$(echo $DECRIBED_SERVICE | jq -r ".services[0].deployments | .[] | select(.taskDefinition != \"$CURRENT_TASK_REVISION\") | .taskDefinition")
        	    echo "Task defn apart from current service Taskdefn" +  $CURRENT_STALE_TASK
        	    #   - echo $CURRENT_STALE_TASK
        
        	    tasks=$(aws ecs --region $AWS_REGION list-tasks --cluster $CLUSTER_NAME | jq -r '.taskArns | map(.[40:]) | reduce .[] as $item (""; . + $item + " ")')
        	    echo "Tasks are as follows" 
        	    echo $tasks
        	    TASKS=$(aws ecs --region $AWS_REGION describe-tasks --cluster $CLUSTER_NAME --task $tasks);
        	 
        	    OLDER_TASK=$(echo $TASKS | jq -r ".tasks[] | select(.taskDefinitionArn!= \"$CURRENT_TASK_REVISION\") | .taskArn | split(\"/\") | .[1] ")
        	    echo "Older Task running  " + $OLDER_TASK
        	    for old_task in $OLDER_TASK; do
        		aws ecs --region us-east-1 stop-task --cluster $CLUSTER_NAME --task $old_task
        	    done    
        
        	 
        	    aws ecs --region $AWS_REGION run-task --cluster $CLUSTER_NAME --task-definition $CURRENT_TASK_REVISION"
	    
	    '''
         }
        }
      }
    }
}



